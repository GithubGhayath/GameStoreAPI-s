{
	"info": {
		"_postman_id": "f90eba50-e491-4aad-a717-1fc0d0faad0e",
		"name": "CRUD Endpoints",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "43479557"
	},
	"item": [
		{
			"name": "Post Game",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Validation status code:\r",
							"pm.test(\"Successful post\",()=>{\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201,202]);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Dark Souls IV\",\r\n    \"GenerID\": 3,\r\n    \"price\": 79.99,\r\n    \"releasDate\": \"2026-09-22\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{HostURL}}/games",
					"host": [
						"{{HostURL}}"
					],
					"path": [
						"games"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Game",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//validation status code:\r",
							"pm.test(\"successful put\",()=>{\r",
							"       pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Street Fighter\",\r\n    \"GenerID\": 3,\r\n    \"price\": 39.99,\r\n    \"releasDate\": \"2000-02-11\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{HostURL}}/games/{{UserID}}",
					"host": [
						"{{HostURL}}"
					],
					"path": [
						"games",
						"{{UserID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Game",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"UserID\",3);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Validation status code:\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Validation header Content-type is present:\r",
							"pm.test(\"Content-type is present\",()=>{\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"//Validation header Content-type is application/json:\r",
							"pm.test(\"conten-type is application/json\",()=>{\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"//Test response time:\r",
							"pm.test(\"Response time is less than 200ms\", ()=> {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"const JsonData = pm.response.json();\r",
							"\r",
							"//Test data type of the response\r",
							"pm.test(\"Test data type of the response\",()=>{\r",
							"    pm.expect(JsonData).to.be.an('object');\r",
							"    pm.expect(JsonData.name).to.be.a(\"string\");\r",
							"    pm.expect(JsonData.generId).to.be.a(\"Number\");\r",
							"    pm.expect(JsonData.price).to.be.a(\"Number\");\r",
							"    pm.expect(new Date(JsonData.releaseDate)).to.be.a('date');\r",
							"});\r",
							"\r",
							"//Test json fields in response:\r",
							"pm.test(\"check value of fields\",()=>{\r",
							"    pm.expect(JsonData.id).to.eql(3);\r",
							"    pm.expect(JsonData.name).to.eql(\"Street Fighter\");\r",
							"    pm.expect(JsonData.generId).to.eql(3);\r",
							"    pm.expect(JsonData.price).to.eql(39.99);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{HostURL}}/Games/{{UserID}}",
					"host": [
						"{{HostURL}}"
					],
					"path": [
						"Games",
						"{{UserID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Game",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//validation status code:\r",
							"pm.test(\"successful put\",()=>{\r",
							"       pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"UserID\",5);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{HostURL}}/games/{{UserID}}",
					"host": [
						"{{HostURL}}"
					],
					"path": [
						"games",
						"{{UserID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Games List",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Validation status code:\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"//Validation response word:\r",
							"pm.test(\"status code name ok\",()=>{\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"//Validation status code:\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Validation header Content-type is present:\r",
							"pm.test(\"Content-type is present\",()=>{\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"//Validation header Content-type is application/json:\r",
							"pm.test(\"conten-type is application/json\",()=>{\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");\r",
							"\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{HostURL}}/Games",
					"host": [
						"{{HostURL}}"
					],
					"path": [
						"Games"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "HostURL",
			"value": "http://localhost:5065",
			"type": "string"
		}
	]
}